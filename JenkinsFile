pipeline {
    agent {
            docker {
                image 'dmjtech/basic-project' // Define the Docker image you want to use
                label 'basic-project'         // This is optional; specifies that the node has Docker installed
                args '-v /path/on/host:/path/in/container' // Additional Docker run options (optional)
            }
        }
    tools {
        maven 'Maven 3.x' // Define Maven tool, should match the one configured in Jenkins
        jdk 'JDK 21'      // Define JDK version, adjust as per your setup
    }
    environment {
        GIT_REPO_URL = 'https://github.com/DilanMadura/basic-project'  // Your Git repository URL
    }
    stages {
        stage('Checkout') {
            steps {
                // Checkout code from the Git repository
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'github-credentials', url: 'https://github.com/DilanMadura/basic-project.git']])
            }
        }
        stage('Build') {
            steps {
                // Run Maven build
                sh 'mvn clean install'
            }
        }
        stage('Unit Test') {
            steps {
                // Run Unit Tests
                sh 'mvn test'
            }
        }
        /* stage('SonarQube Analysis') {  // Optional: For code quality
            steps {
                script {
                    // If you're using SonarQube for code analysis
                    withSonarQubeEnv('SonarQube') {
                        sh 'mvn sonar:sonar'
                    }
                }
            }
        } */
        stage('Package') {
            steps {
                // Package the Spring Boot app (creates a jar)
                sh 'mvn package'
            }
        }
        stage('Build Docker Image') {
             steps {
                  script {
                       docker.build('basic-project')
                  }
             }
        }
        stage('Deploy') {  // Optional: For deployment
            steps {
                // Deploy the app (optional, depending on your environment)
                echo 'Deploying the application...'
            }
        }
    }
    post {
        always {
            // Clean workspace after build
            cleanWs()
        }
        success {
            echo 'Build and Test Success!'
        }
        failure {
            echo 'Build or Tests failed!'
        }
    }
}
